DROP DATABASE IF EXISTS LMS;
-- =========================
-- Database Creation
-- =========================
CREATE DATABASE IF NOT EXISTS LMS;
USE LMS;

-- =========================
-- UserRole Table
-- =========================
CREATE TABLE IF NOT EXISTS UserRole (
    RoleID INT AUTO_INCREMENT PRIMARY KEY,
    RoleName VARCHAR(50) NOT NULL UNIQUE,
    Description TEXT
);

-- Insert Default Roles (safe to re-run)
INSERT IGNORE INTO UserRole (RoleName, Description) VALUES
('admin', 'System Administrator'),
('lecturer', 'Lecturer / Teacher'),
('student', 'Registered Student');

-- =========================
-- UserAccount Table (Authentication)
-- =========================
CREATE TABLE IF NOT EXISTS UserAccount (
    UserID INT AUTO_INCREMENT PRIMARY KEY,
    Email VARCHAR(100) NOT NULL UNIQUE,
    Password VARCHAR(255) NOT NULL,
    RoleID INT NOT NULL,
    FOREIGN KEY (RoleID) REFERENCES UserRole(RoleID)
        ON DELETE CASCADE ON UPDATE CASCADE
);

-- =========================
-- Admin Profile Table
-- =========================
CREATE TABLE IF NOT EXISTS Admin (
    AdminID INT AUTO_INCREMENT PRIMARY KEY,
    UserID INT NOT NULL UNIQUE,
    Name VARCHAR(100) NOT NULL,
    FOREIGN KEY (UserID) REFERENCES UserAccount(UserID)
        ON DELETE CASCADE ON UPDATE CASCADE
);

-- Insert first admin user (only if not exists)
INSERT INTO UserAccount (Email, Password, RoleID)
SELECT 'admin@example.com',
       '$2y$10$gRjS3MMyw9d7pR8Y9XbKfeI6Po1EmZwbMblH5ScB3VwxCBo4nDqL2',
       ur.RoleID
FROM UserRole ur
WHERE ur.RoleName = 'admin'
  AND NOT EXISTS (SELECT 1 FROM UserAccount ua WHERE ua.Email = 'admin@example.com');

-- Insert matching Admin profile (only if not exists)
INSERT INTO Admin (UserID, Name)
SELECT ua.UserID, 'Super Admin'
FROM UserAccount ua
WHERE ua.Email = 'admin@example.com'
  AND NOT EXISTS (SELECT 1 FROM Admin a WHERE a.UserID = ua.UserID);

-- =========================
-- Batch Table
-- =========================
CREATE TABLE IF NOT EXISTS Batch (
    BatchID INT AUTO_INCREMENT PRIMARY KEY,
    BatchName VARCHAR(100) NOT NULL,
    Description TEXT
);

-- =========================
-- Student Profile Table
-- =========================
CREATE TABLE IF NOT EXISTS Student (
    StudentID INT AUTO_INCREMENT PRIMARY KEY,
    UserID INT NOT NULL UNIQUE,
    Name VARCHAR(100) NOT NULL,
    NIC VARCHAR(20) UNIQUE NOT NULL,
    BatchID INT,
    FOREIGN KEY (UserID) REFERENCES UserAccount(UserID)
        ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (BatchID) REFERENCES Batch(BatchID)
        ON DELETE SET NULL ON UPDATE CASCADE
);

-- =========================
-- Lecturer Profile Table
-- =========================
CREATE TABLE IF NOT EXISTS Lecturer (
    LecturerID INT AUTO_INCREMENT PRIMARY KEY,
    UserID INT NOT NULL UNIQUE,
    Name VARCHAR(100) NOT NULL,
    NIC VARCHAR(20) UNIQUE NOT NULL,
    FOREIGN KEY (UserID) REFERENCES UserAccount(UserID)
        ON DELETE CASCADE ON UPDATE CASCADE
);

-- =========================
-- Course Table
-- =========================
CREATE TABLE IF NOT EXISTS Course (
    CourseID INT AUTO_INCREMENT PRIMARY KEY,
    CourseName VARCHAR(100) NOT NULL,
    BatchID INT,
    LecturerID INT,
    FOREIGN KEY (BatchID) REFERENCES Batch(BatchID)
        ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (LecturerID) REFERENCES Lecturer(LecturerID)
        ON DELETE SET NULL ON UPDATE CASCADE
);

-- =========================
-- Enrollment Table (M:N for Student â†” Course)
-- =========================
CREATE TABLE IF NOT EXISTS Enrollment (
    EnrollmentID INT AUTO_INCREMENT PRIMARY KEY,
    StudentID INT,
    CourseID INT,
    FOREIGN KEY (StudentID) REFERENCES Student(StudentID)
        ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (CourseID) REFERENCES Course(CourseID)
        ON DELETE CASCADE ON UPDATE CASCADE,
    UNIQUE(StudentID, CourseID)
);

-- =========================
-- Announcement Table
-- =========================
CREATE TABLE IF NOT EXISTS Announcement (
    AnnouncementID INT AUTO_INCREMENT PRIMARY KEY,
    Title VARCHAR(255) NOT NULL,
    Date DATETIME DEFAULT CURRENT_TIMESTAMP,
    CourseID INT,
    LecturerID INT,
    FOREIGN KEY (CourseID) REFERENCES Course(CourseID)
        ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (LecturerID) REFERENCES Lecturer(LecturerID)
        ON DELETE CASCADE ON UPDATE CASCADE
);

-- =========================
-- LectureMaterial Table
-- =========================
CREATE TABLE IF NOT EXISTS LectureMaterial (
    MaterialID INT AUTO_INCREMENT PRIMARY KEY,
    FileName VARCHAR(255) NOT NULL,
    FileType ENUM('PPT','PDF','WORD') NOT NULL,
    UploadDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    CourseID INT,
    LecturerID INT,
    FOREIGN KEY (CourseID) REFERENCES Course(CourseID)
        ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (LecturerID) REFERENCES Lecturer(LecturerID)
        ON DELETE CASCADE ON UPDATE CASCADE
);
